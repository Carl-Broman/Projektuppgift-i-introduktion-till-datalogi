{"ast":null,"code":"const weatherApiKey = process.env.REACT_APP_WEATHER_API_KEY;\n\n/**\n * Function that uses location and time to gather weather data and returns json data to\n * work with for later\n * @param {String} location \n * @param {String} time \n * @param {String} date\n * @returns {String}\n */\nexport async function weatherData(date, time, location) {\n  const dateString = date + \"T\" + time + \":00.000Z\";\n  const forecastMoment = new Date(dateString);\n  console.log(forecastMoment.toISOString());\n\n  // First call to find coordinates of given location\n  const geocodingUrl = `https://api.openweathermap.org/geo/1.0/direct?q=${location}&limit=1&appid=${weatherApiKey}`;\n\n  // Wait for response before saving it as data\n  const response = await fetch(geocodingUrl);\n  const data = await response.json();\n\n  // Saving both coordinates of the location as lat and lon constants\n  const lat = data[0].lat.toString();\n  const lon = data[0].lon.toString();\n\n  // Second call to find weather data for given location and time\n  const weatherUrl = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${weatherApiKey}`;\n  console.log(weatherUrl);\n  const weatherRespone = await fetch(weatherUrl);\n  const weatherData = await weatherRespone.json();\n  let i = 0;\n  while (i < weatherData.list.length) {\n    const compareTime = new Date(weatherData.list[i].dt_txt.replace(\" \", \"T\") + \".000Z\");\n    if (compareTime > forecastMoment) {\n      return weatherData.list[i];\n    }\n    i++;\n  }\n  return weatherData.list[weatherData.list.length - 1];\n}","map":{"version":3,"names":["weatherApiKey","process","env","REACT_APP_WEATHER_API_KEY","weatherData","date","time","location","dateString","forecastMoment","Date","console","log","toISOString","geocodingUrl","response","fetch","data","json","lat","toString","lon","weatherUrl","weatherRespone","i","list","length","compareTime","dt_txt","replace"],"sources":["/root/Projektuppgift-i-introduktion-till-datalogi/forecaster/src/weatherFetcher.js"],"sourcesContent":["const weatherApiKey = process.env.REACT_APP_WEATHER_API_KEY;\n\n/**\n * Function that uses location and time to gather weather data and returns json data to\n * work with for later\n * @param {String} location \n * @param {String} time \n * @param {String} date\n * @returns {String}\n */\nexport async function weatherData(date, time, location) {\n    const dateString = date + \"T\" + time + \":00.000Z\";\n    const forecastMoment = new Date(dateString);\n    console.log(forecastMoment.toISOString())\n\n    // First call to find coordinates of given location\n    const geocodingUrl = `https://api.openweathermap.org/geo/1.0/direct?q=${location}&limit=1&appid=${weatherApiKey}`;\n\n    // Wait for response before saving it as data\n    const response = await fetch(geocodingUrl);\n    const data = await response.json();\n\n    // Saving both coordinates of the location as lat and lon constants\n    const lat = data[0].lat.toString();\n    const lon = data[0].lon.toString();\n\n    // Second call to find weather data for given location and time\n    const weatherUrl = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${weatherApiKey}`;\n    console.log(weatherUrl)\n\n    const weatherRespone = await fetch(weatherUrl)\n    const weatherData = await weatherRespone.json();\n    let i = 0;\n    while(i < weatherData.list.length){\n        const compareTime = new Date(weatherData.list[i].dt_txt.replace(\" \", \"T\") + \".000Z\");\n        if(compareTime > forecastMoment){\n            return weatherData.list[i];\n        }\n        i++\n    }\n    return weatherData.list[weatherData.list.length - 1];\n}"],"mappings":"AAAA,MAAMA,aAAa,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,WAAWA,CAACC,IAAI,EAAEC,IAAI,EAAEC,QAAQ,EAAE;EACpD,MAAMC,UAAU,GAAGH,IAAI,GAAG,GAAG,GAAGC,IAAI,GAAG,UAAU;EACjD,MAAMG,cAAc,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;EAC3CG,OAAO,CAACC,GAAG,CAACH,cAAc,CAACI,WAAW,CAAC,CAAC,CAAC;;EAEzC;EACA,MAAMC,YAAY,GAAI,mDAAkDP,QAAS,kBAAiBP,aAAc,EAAC;;EAEjH;EACA,MAAMe,QAAQ,GAAG,MAAMC,KAAK,CAACF,YAAY,CAAC;EAC1C,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;EAElC;EACA,MAAMC,GAAG,GAAGF,IAAI,CAAC,CAAC,CAAC,CAACE,GAAG,CAACC,QAAQ,CAAC,CAAC;EAClC,MAAMC,GAAG,GAAGJ,IAAI,CAAC,CAAC,CAAC,CAACI,GAAG,CAACD,QAAQ,CAAC,CAAC;;EAElC;EACA,MAAME,UAAU,GAAI,wDAAuDH,GAAI,QAAOE,GAAI,UAASrB,aAAc,EAAC;EAClHW,OAAO,CAACC,GAAG,CAACU,UAAU,CAAC;EAEvB,MAAMC,cAAc,GAAG,MAAMP,KAAK,CAACM,UAAU,CAAC;EAC9C,MAAMlB,WAAW,GAAG,MAAMmB,cAAc,CAACL,IAAI,CAAC,CAAC;EAC/C,IAAIM,CAAC,GAAG,CAAC;EACT,OAAMA,CAAC,GAAGpB,WAAW,CAACqB,IAAI,CAACC,MAAM,EAAC;IAC9B,MAAMC,WAAW,GAAG,IAAIjB,IAAI,CAACN,WAAW,CAACqB,IAAI,CAACD,CAAC,CAAC,CAACI,MAAM,CAACC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,OAAO,CAAC;IACpF,IAAGF,WAAW,GAAGlB,cAAc,EAAC;MAC5B,OAAOL,WAAW,CAACqB,IAAI,CAACD,CAAC,CAAC;IAC9B;IACAA,CAAC,EAAE;EACP;EACA,OAAOpB,WAAW,CAACqB,IAAI,CAACrB,WAAW,CAACqB,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;AACxD"},"metadata":{},"sourceType":"module","externalDependencies":[]}